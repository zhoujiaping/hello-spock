系统采用四种测试：单元测试、模块测试、接口测试、ui测试。
其中单元测试、模块测试由开发人员执行。
接口测试、ui测试由测试人员执行。

单元测试，测试某个类的某个方法，必须将该类的所有有副作用的依赖进行mock。
特殊情况，需要开发人员提供特殊支持。比如redis分布式锁，不方便进行mock，那就使用替代方案，
单机环境可以基于jdk Lock的实现作为替代。
单元测试推荐使用spock框架，使用groovy脚本编写。
为了配合单元测试，有些代码需要做相应的改造。
比如spring可以基于注解@Resource注入依赖，而我们使用mock的时候，要成功注入mock对象，
要么给对应的属性添加setter，要么通过反射实现。
https://semaphoreci.com/community/tutorials/stubbing-and-mocking-in-java-with-the-spock-testing-framework

模块测试，对当前子系统的类进行集成测试，必须将所有外部接口进行mock。
模块测试需要初始化环境和清理环境。
数据库环境通过执行sql脚本创建所需要的数据。
redis环境、kafka环境、zk环境，由于不容易产生污染，可以不用管（特殊的情况处理即可）。
模块测试的mock，不能简单的使用外部接口挡板，而应该在每一个测试方法中进行mock，
因为不同的测试用例要求接口返回不同的结果（正常执行、系统异常等各种结果），
所以推荐使用mock库，而不是使用诸如dubbo的stub/mock之类的解决方案（特殊情况，
比如mockito实现不了，代码实现又不方便改，那么就用dubbo的stub/mock之类的解决方案）。
mock库推荐使用mockito。
https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2
https://www.ibm.com/developerworks/cn/java/j-lo-powermock/index.html

必须保证单元测试和模块测试在执行mvn package时会执行。
单元测试和模块测试的执行环境会有两个，一个是本地，一个是测试环境。
